{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SET_ENDTIME","SET_TIMELEFT","SET_SECONDS","SET_PAUSED","initialState","adjustedHour","endMinutes","remainderSeconds","seconds","inputSeconds","minutesLeft","paused","reducer","state","action","type","payload","App","React","useState","useReducer","dispatch","timerRef","useRef","displayTimeLeft","Math","floor","clearTimer","clearInterval","current","startTimer","x","parsedSeconds","parseInt","pauseTimer","setPaused","useEffect","then","Date","now","timestamp","end","hour","getHours","getMinutes","displayEndTime","setInterval","secondsLeft","round","setSeconds","className","onClick","disabled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91cc53df.chunk.js","sourcesContent":["//https://codepen.io/search/pens?q=react+countdown+&cursor=ZD0xJm89MCZwPTQ=\nimport './App.css';\n\nimport React from 'react'\n\nconst SET_ENDTIME = 'SET_ENDTIME';\nconst SET_TIMELEFT = 'SET_TIMELEFT';\nconst SET_SECONDS = 'SET_SECONDS';\nconst SET_PAUSED = 'SET_PAUSED';\n \nconst initialState = {\n  adjustedHour: 0,\n  endMinutes: 0,\n  remainderSeconds: 0,\n  seconds: 0,\n  inputSeconds: 0,\n  minutesLeft: 0,\n  paused: false\n}\n\nfunction reducer(state, action) {\n  if (action.type === SET_TIMELEFT) {\n    return {\n      ...state,\n      ...action.payload\n    };\n  }\n\n  if (action.type === SET_ENDTIME) {\n    return {\n      ...state,\n      ...action.payload\n    };\n  }\n\n  if (action.type === SET_SECONDS) {\n    return {\n      ...state,\n      ...action.payload\n    };\n  }\n\n  if (action.type === SET_PAUSED) {\n    return {\n      ...state,\n      ...action.payload\n    };\n  }\n}\n\nfunction App() {\n  const [inputSeconds, setInputSeconds] = React.useState(0);\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  const { adjustedHour, endMinutes, remainderSeconds, seconds, minutesLeft, paused } = state;\n\n  const timerRef = React.useRef(null);\n\n  function displayTimeLeft(seconds) {\n    const minutesLeft = Math.floor(seconds / 60);\n    dispatch({\n      type: SET_TIMELEFT,\n      payload:{\n        remainderSeconds: seconds,\n        minutesLeft\n      }\n    })\n  }\n\n  function displayEndTime(timestamp) {\n    const end = new Date(timestamp);\n    const hour = end.getHours();\n    const adjustedHour = hour > 12 ? hour - 12 : hour;\n    const endMinutes = end.getMinutes();\n    dispatch({\n      type: SET_ENDTIME,\n      payload:{\n        adjustedHour,\n        endMinutes\n      }\n    })\n  }\n\n  function clearTimer() {\n    clearInterval(timerRef.current);\n    timerRef.current = null;\n  }\n \n  React.useEffect(() => {\n    const now = Date.now();\n    const then = now + seconds * 1000;  \n    clearTimer()\n    displayTimeLeft(seconds);\n    displayEndTime(then);\n\n    if (!paused) {\n      timerRef.current = setInterval(() => {\n        const secondsLeft = Math.round((then - Date.now()) / 1000);\n        // check if we should stop it!\n        if(secondsLeft < 0) {\n          clearTimer();\n          return setSeconds(0);\n        }\n        // display it\n        displayTimeLeft(secondsLeft);\n      }, 200);\n    } else {\n      clearTimer();\n    }\n\n    return () => clearTimer();\n  }, [seconds, paused]);\n\n  function startTimer(x) {\n    const parsedSeconds = parseInt(x);\n    dispatch({\n      type: SET_SECONDS,\n      payload:{\n        seconds: parsedSeconds,\n        paused: false\n      }\n    })\n  }\n\n  function setSeconds(seconds) {\n    dispatch({\n      type: SET_SECONDS,\n      payload:{\n        seconds\n      }\n    })\n  }\n\n  const setPaused = (paused) => {\n    dispatch({\n      type: SET_PAUSED,\n      payload:{\n        paused,\n        seconds: paused ? remainderSeconds : remainderSeconds-1\n      }\n    })\n  }\n\n  function pauseTimer() {\n    setPaused(!paused);\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    dispatch({\n      type: SET_SECONDS,\n      payload:{\n        seconds: inputSeconds\n      }\n    })\n  }\n\n  function handleChange(event) {\n    setInputSeconds(event.target.value);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"timer__controls top\">\n        <button onClick={() => startTimer(20)} className=\"timer__button\">20s</button>\n        <button onClick={() => startTimer(300)} className=\"timer__button\">5m</button>\n        <button onClick={() => startTimer(900)} className=\"timer__button\">15m</button>\n        <button onClick={() => startTimer(1200)} className=\"timer__button\">20m</button>\n        <button onClick={() => startTimer(3600)} className=\"timer__button\">1h</button>\n      </div>\n      <div className={`display`}>\n        <h1 className={`display__time-left ${((remainderSeconds > 0) || (minutesLeft > 0)) ? `timer-running` : 'timer-not-running'}`}>{`${minutesLeft}:${remainderSeconds % 60 < 10 ? '0' : '' }${remainderSeconds % 60}`}</h1>\n        <p className=\"display__end-time\">{`Done At ${adjustedHour}:${endMinutes < 10 ? '0' : ''}${endMinutes}`}</p>\n      </div>\n\n      <div className=\"timer__controls bottom\">\n        {/* <form name=\"customForm\" id=\"custom\" onSubmit={handleSubmit}>\n          <input type=\"text\" name=\"minutes\" placeholder=\"Enter Minutes\" value={inputSeconds} onChange={handleChange}/>\n        </form> */}\n        <button onClick={() => pauseTimer()} className=\"timer__button\" disabled={!seconds ? true : false}>Pause</button>\n      </div>\n    </div>\n  );\n}\n\nexport default  App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}